/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 23.09.2021 14:32:37

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 2912;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteEvalTensor tflEvalTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,800 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 192, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[16] = { 24020, -13041, -17644, 8513, -13633, 3942, 86, 68, -12960, -2238, 2678, -13846, -1093, 1027, 578, 5536, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const TfArray<16, float> quant2_scale = { 16, { 1.4033015759196132e-05, 8.8558799689053558e-06, 1.0092971024278086e-05, 1.1706631994456984e-05, 9.9810395113308914e-06, 8.7983580669970252e-06, 1.3463784853229299e-05, 1.2794751455658115e-05, 7.8072243923088536e-06, 9.5810692073428072e-06, 9.7168567663175054e-06, 9.0141993496217765e-06, 1.3344784747459926e-05, 8.8285532910958864e-06, 1.1321224519633688e-05, 1.2067114766978193e-05, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[32] = { 557, -2525, -1708, -181, -2751, -4411, 475, -4063, -1732, -1471, -4840, 415, -4559, 2490, -3873, -594, -3504, -4600, 2176, 3611, 1353, 602, -4073, 4936, 678, -3344, 1537, -1005, 1083, 2337, 475, -1214, };
const TfArray<1, int> tensor_dimension3 = { 1, { 32 } };
const TfArray<32, float> quant3_scale = { 32, { 3.3756175980670378e-05, 2.9804316000081599e-05, 1.9475233784760348e-05, 2.6782196073327214e-05, 1.7408592611900531e-05, 1.6047035387600772e-05, 1.746612906572409e-05, 2.5356437618029304e-05, 1.5217300642689224e-05, 1.9853147023241036e-05, 2.149291685782373e-05, 2.7347641662345268e-05, 2.3094222342479043e-05, 1.9455179426586255e-05, 2.8435946660465561e-05, 2.3781529307598248e-05, 2.6409919883008115e-05, 2.0929563106619753e-05, 2.3446171326213516e-05, 2.0992696590838023e-05, 2.1094358089612797e-05, 3.2268995710182935e-05, 2.3088905436452478e-05, 1.9731800421141088e-05, 1.8745735360425897e-05, 2.3781452910043299e-05, 3.3315242035314441e-05, 2.5819354050327092e-05, 2.3742653866065666e-05, 3.0899973353371024e-05, 2.8070246116840281e-05, 2.422453326289542e-05, } };
const TfArray<32, int> quant3_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[64] = { -584, 4546, -3547, 5855, -6894, 2995, -4107, -974, -837, 6348, -2409, 2768, -3889, -5446, -2627, -3584, -1709, 4738, 10187, -4317, 1362, -3013, 1813, 8608, -6757, -7388, 1752, -4891, -1263, -5466, 5632, -4327, 6893, -2627, 3441, 62, 857, 2283, -3559, -7791, -4340, -3881, -1736, 5417, -6368, -5517, -6527, -3513, -4302, -2679, -4578, -4166, -3658, -5145, -3582, -4842, -590, -1505, -6151, -4824, -4081, -3004, -171, 2959, };
const TfArray<1, int> tensor_dimension4 = { 1, { 64 } };
const TfArray<64, float> quant4_scale = { 64, { 1.9285773305455223e-05, 1.5420626368722878e-05, 2.4798089725663885e-05, 1.6867867088876665e-05, 1.3656819646712393e-05, 1.7255824786843732e-05, 1.7595237295608968e-05, 1.7889000446302816e-05, 1.6246563973254524e-05, 1.6338088244083337e-05, 1.1040736353606917e-05, 2.045999099209439e-05, 1.1816410733445082e-05, 1.2440445061656646e-05, 1.6161829989869148e-05, 1.995823004108388e-05, 2.0776980818482116e-05, 1.288992370973574e-05, 1.4241156350180972e-05, 9.6174308055196889e-06, 1.6486563254147768e-05, 1.718202474876307e-05, 1.9858536688843742e-05, 1.753383367031347e-05, 1.1443469702498987e-05, 1.1662385077215731e-05, 1.8552684196038172e-05, 1.7755755834514275e-05, 2.9050625016679987e-05, 1.1613475180638488e-05, 1.3077868970867712e-05, 1.8288084902451374e-05, 1.4500247743853834e-05, 8.8672104539000429e-06, 1.5269752111635171e-05, 2.2751755750505254e-05, 2.1688952983822674e-05, 3.0779370717937127e-05, 2.1518650100915693e-05, 1.2471223271859344e-05, 1.7697166185826063e-05, 1.5262534361681901e-05, 2.2942869691178203e-05, 1.5131927284528501e-05, 1.334411990683293e-05, 1.3981033589516301e-05, 1.251870889973361e-05, 2.142619268852286e-05, 2.7209283871343359e-05, 1.2323273040237837e-05, 9.1068277470185421e-06, 1.6441483239759691e-05, 9.1852571131312288e-06, 1.7074093193514273e-05, 2.3636701371287927e-05, 1.0758659300336149e-05, 2.5485702281002887e-05, 1.7837168343248777e-05, 1.6751428120187484e-05, 1.5958146832417697e-05, 9.9790013337042183e-06, 1.8424974769004621e-05, 2.6157136744586751e-05, 2.4696302716620266e-05, } };
const TfArray<64, int> quant4_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[2] = { -3786, 3786, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const TfArray<1, float> quant5_scale = { 1, { 3.3787877327995375e-05, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[2*192] = { 
  27, -52, 64, -44, -26, -46, -22, -39, 0, -3, -71, -3, 23, -34, 33, 15, 72, -49, -64, -24, -74, 32, -25, -51, -9, -18, 59, 27, 71, -42, -38, 65, -24, -11, -41, 39, -41, -47, 61, -5, 39, -35, -25, 14, -23, -1, -36, 23, 4, 34, 19, 44, -28, 24, 41, 18, 20, -8, -37, -47, -32, 39, 29, -70, 27, -8, 29, 46, -37, -67, 29, 5, -33, -6, 5, 5, 1, -36, -55, 11, -21, -36, 12, -31, -64, 72, -8, 6, -45, 50, -26, 20, 29, 21, 2, 24, -31, -21, -59, 6, -60, -64, 59, -9, 88, 45, 6, -8, -64, 4, 10, 44, 29, -33, -21, -13, -16, 57, 50, 39, -69, 38, -14, 21, 27, -26, -54, 25, 41, -29, 44, -46, -35, -64, -31, 44, 23, 27, 21, -12, 3, 48, 74, 35, 9, 5, -19, -30, -73, 8, -58, -22, -2, 26, -20, 6, 34, -21, -19, 47, -31, -29, -38, -38, -3, -36, 40, 36, -4, -9, 9, -65, 27, -41, 32, 57, 74, -47, 17, 2, 1, -3, 27, 13, -2, 37, 38, -38, -33, 73, -31, 14, 
  -30, 44, -72, 66, -12, 20, -42, -47, -60, 36, -29, -39, 32, -32, 31, -39, -21, 37, 34, -40, -5, -45, 56, 76, -36, -31, -40, -59, -68, -15, 43, -56, 51, 7, 87, -27, -5, 76, -33, 8, -28, 26, -35, -4, -37, -41, -4, 3, 18, -13, 28, -48, 0, -49, -58, 27, -31, -38, 4, 15, 6, -17, -42, 9, -37, 37, -22, -28, -55, 13, -22, 11, -49, 57, 7, -24, -34, -13, 6, -67, 20, 16, 34, -14, 48, -87, 63, 19, -35, -1, 57, -1, -34, 36, -17, -63, -21, -27, 56, 69, 57, 17, 2, -22, -127, -58, 84, 33, -22, -22, 25, -17, -110, -35, -2, 37, 20, -11, -68, -22, 12, -68, -55, -15, -24, 28, 18, -4, -62, 20, 42, 44, 42, 11, 33, -41, 27, 49, 20, 65, 36, -42, -47, -97, 47, -27, 29, 22, 67, -6, 99, 53, -1, 40, -27, -50, -5, -8, -21, -15, 62, -20, 2, -23, -25, 45, -82, -30, 11, -8, 11, 37, -9, 0, 30, -32, -75, -43, 5, 38, 32, -74, -59, 50, -20, 26, -64, -19, 51, -33, -2, 34, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 2,192 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0034583203960210085, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[16*1*3*40] = { 
  /* [0][0][][] */ -23,-55,-15,12,56,10,36,-27,-57,-49,-7,17,61,0,0,-25,-54,51,-3,-39,23,70,-25,15,0,15,-127,-57,-47,-6,-50,15,-27,-110,-61,-100,28,-25,-39,-99, 24,14,-13,51,-60,-73,1,-46,-48,-13,-8,-17,-97,-54,-6,-100,-13,-77,-19,73,-87,32,32,-46,-81,-55,-15,-86,-19,-31,-16,-17,-23,-17,27,-18,-52,-91,-69,-47, -26,-3,21,-73,-58,55,19,-26,57,34,32,21,5,-22,20,34,58,33,-2,40,52,54,-39,65,-6,59,74,82,49,-3,-37,31,-17,24,26,27,61,10,14,-25, 
  /* [1][0][][] */ 3,20,12,-9,8,-24,33,-34,1,-18,-74,-85,6,21,-104,-60,-46,-63,7,68,-6,32,-39,71,57,-23,-35,19,59,-40,-33,53,93,29,-64,-19,12,-94,-89,43, 13,90,101,21,80,5,61,-4,-22,-61,-58,-84,-45,15,29,-84,11,10,76,95,4,45,86,-11,23,-45,15,46,127,31,-99,-15,104,97,5,119,49,-43,35,-5, 16,82,59,80,35,56,-7,59,-1,-58,-29,-113,1,60,-86,-64,-108,16,56,69,68,72,-23,-23,22,-20,88,69,34,9,-79,-61,109,-15,12,-33,-63,-65,-84,-24, 
  /* [2][0][][] */ -118,-45,-119,-87,-14,-71,16,-57,-27,-25,-56,-36,-79,11,-73,-41,-3,-46,-84,-81,-40,-27,-47,-89,-111,20,14,3,38,-98,-86,-72,-34,-76,8,-52,-64,-46,48,4, -3,123,107,127,30,37,103,38,5,25,75,-8,-59,62,-11,-9,88,7,28,80,60,92,-5,55,12,26,-33,89,41,20,44,28,21,-35,23,60,40,53,34,-17, 52,67,48,48,26,72,-20,-6,-6,4,28,17,-11,6,-41,-33,-43,23,37,52,5,-8,-58,-38,18,72,-73,76,44,29,-36,-24,-66,47,-96,-68,31,-20,14,6, 
  /* [3][0][][] */ -88,-35,61,-6,-39,30,16,81,13,-67,67,44,41,-48,-79,-15,8,-45,-66,-30,-18,8,43,39,-23,-49,-25,-46,-30,20,13,45,-35,-40,7,33,-37,53,-8,85, -21,64,60,22,-17,15,22,43,41,75,12,-50,-100,-127,-69,-68,-49,21,-32,16,39,-34,24,-22,5,-35,-40,-2,31,30,58,60,-51,-103,-59,-85,7,-8,77,82, -52,-14,35,42,-55,-10,17,-12,-61,34,7,14,-70,-57,35,-101,39,-81,-46,29,12,-20,47,12,-11,12,-74,-52,13,-66,70,-60,33,-56,-58,-65,29,-1,-53,-13, 
  /* [4][0][][] */ -2,-16,64,1,-47,3,10,-33,-9,-14,-15,10,-28,-29,36,-33,12,-59,36,-22,-19,9,25,-76,-22,12,-28,-6,127,-69,-57,-73,39,-8,4,86,-42,27,5,16, 46,113,113,10,67,80,49,26,-29,-2,13,20,32,28,33,-69,-22,40,58,73,36,30,20,-8,-34,25,89,94,117,-14,19,-21,20,91,25,6,-17,-55,-4,78, 75,3,-19,65,46,-3,-9,49,-67,-74,-35,-8,-30,-28,39,-13,6,15,1,16,-23,31,85,63,-22,64,60,76,13,2,-81,38,16,100,-20,72,32,11,-16,15, 
  /* [5][0][][] */ -19,-14,-56,-20,47,0,53,-56,60,-2,30,82,53,81,12,119,-22,-70,5,-69,-59,-81,-8,19,-66,-57,-60,-58,-8,92,-4,-2,-9,15,-35,24,45,114,-17,74, -39,-48,-18,12,21,-3,10,-11,26,75,3,41,75,46,74,-19,-50,89,-76,-19,-18,-56,-85,-55,66,-29,-95,39,-6,-65,71,101,-38,-104,15,-27,33,41,127,-17, -27,-75,-11,21,-63,34,-8,32,110,-3,14,-34,-62,94,21,42,-30,-34,-40,-53,-95,-68,-84,25,49,79,-37,-17,24,-17,-1,-33,-68,-54,21,-78,-35,118,86,44, 
  /* [6][0][][] */ -80,-60,-62,19,-94,-64,-29,6,25,14,-18,15,-45,-59,30,-28,-42,-42,-21,-48,28,-20,-5,-47,-16,-21,-3,-66,-23,-20,-7,50,2,20,127,17,-47,-20,2,-47, -13,8,20,3,27,8,-37,-9,-23,-16,10,4,-40,6,12,5,-7,25,-1,21,0,-37,-1,-30,-31,29,-32,-39,18,-33,-10,35,57,85,102,24,-61,-21,-24,-47, -58,-69,-14,10,-51,-46,-4,2,18,10,-43,14,-60,-33,-41,-13,-37,-46,-38,6,3,-38,18,-40,-78,13,42,-53,-22,-22,18,19,31,54,7,-10,-32,-61,15,-57, 
  /* [7][0][][] */ -9,-10,5,-10,-28,-82,4,1,-33,25,25,20,10,-56,30,-56,7,-19,48,12,3,-2,-42,18,29,-29,-18,40,27,2,-28,55,73,97,118,53,16,-77,-74,18, -82,-127,-27,6,-62,-79,-38,-7,23,-9,3,5,22,8,-42,-67,-40,-39,-86,-60,-25,1,-39,-12,-24,-62,-5,-50,14,-43,-12,0,-5,48,106,-7,-39,-34,-50,-19, -83,-38,-47,-70,-28,16,-20,-5,25,-49,7,-20,-23,-42,-13,-2,-20,-11,-93,-98,-12,-40,12,-9,-21,-68,-24,-23,-44,39,-64,-28,57,-5,60,-97,9,-64,5,-71, 
  /* [8][0][][] */ 33,80,2,-6,-54,22,59,-97,-7,-38,4,0,26,-44,-51,-46,-74,23,-70,-91,-2,-34,33,-83,-32,-1,-5,107,26,-19,-79,-65,-70,13,33,85,-40,-100,-44,-47, 67,127,69,37,-6,3,54,-8,-84,65,35,-113,7,-63,18,-86,-75,-23,42,-4,-70,37,41,65,-25,26,-32,67,54,46,-99,-84,-1,47,46,22,-10,-96,-61,-12, 118,59,81,16,119,64,-28,112,-8,-82,29,-26,-37,46,49,25,-9,15,82,82,-24,83,28,42,17,77,64,41,72,-31,4,72,105,-48,32,-38,-34,-44,-94,38, 
  /* [9][0][][] */ -45,-60,-7,-96,-25,-63,11,16,17,-36,56,-29,67,6,91,-15,1,-66,-52,-12,-26,-5,41,-62,45,28,-127,-100,-20,-17,89,39,-2,-81,12,42,48,123,115,122, -55,37,-21,-63,16,20,0,65,-67,-46,-5,49,32,-43,-1,78,65,6,21,-49,-29,-31,-3,-66,-42,-74,-59,43,-3,49,-13,-23,-35,-22,-51,-64,-6,-2,86,39, 49,-27,19,-64,33,43,-62,-77,35,-121,-70,-117,26,14,-33,25,93,32,-14,61,-36,-62,-85,-49,-29,-111,31,-105,1,-25,43,-52,9,-61,1,7,25,-43,85,27, 
  /* [10][0][][] */ -127,28,-64,40,-41,64,31,-68,-40,63,43,80,0,-74,-31,24,-13,35,-37,-42,-63,10,51,-45,-47,-51,-41,-80,-87,51,4,21,-20,26,2,4,7,5,91,49, -122,-64,-96,21,-103,-16,56,-13,39,-7,-5,56,45,27,-36,87,69,71,-35,-77,-20,24,55,15,9,-47,-45,6,-22,-6,70,49,18,-104,50,-64,8,6,124,16, -113,-86,-84,-68,51,-85,-25,36,18,20,-1,75,3,69,52,-4,79,-36,18,-43,30,-9,-55,-39,33,-67,-85,-52,-54,57,84,16,-41,-63,75,10,80,124,70,52, 
  /* [11][0][][] */ 103,105,-24,74,31,13,42,-64,15,-36,37,-115,-58,-20,2,-25,-93,5,54,-24,36,-44,82,30,59,55,-21,124,127,-78,26,-77,23,42,17,-26,41,-48,-106,-73, 35,45,36,65,-2,74,18,-37,43,41,-40,-100,-45,76,-31,-80,25,47,8,109,18,31,80,69,46,81,103,-4,33,11,27,61,72,45,-84,10,21,-63,-27,-60, 29,43,-20,66,-59,41,-50,19,21,-28,-41,14,-37,-52,24,-84,-65,-44,-33,87,-52,72,-17,-15,-38,20,65,78,36,-6,-78,53,6,1,-28,41,-97,-17,-11,-31, 
  /* [12][0][][] */ -19,-13,-63,20,25,11,2,-19,10,-29,12,-90,9,38,-56,-24,-8,-14,49,102,58,10,40,16,-12,-52,-14,-17,-31,17,-51,54,52,47,26,49,24,-8,-70,-20, -26,2,-123,-51,-30,-70,-21,-5,-51,17,-34,-85,-53,-11,-27,-5,-21,-15,3,8,-30,2,16,-5,4,-44,-50,23,23,-14,-10,1,11,-3,1,-18,44,-51,-19,5, -74,46,-62,-19,-24,7,-90,-26,6,32,-6,42,-19,97,-83,64,43,-10,8,-20,-24,-33,-4,-13,-127,-69,-72,-56,-50,-93,-63,-17,-71,-92,81,10,-32,21,-42,-110, 
  /* [13][0][][] */ -14,-13,-39,-33,-71,-15,-22,23,77,76,50,13,-2,-36,74,93,47,77,-36,-55,-56,55,63,53,74,-60,-99,-38,-88,-38,-37,-45,8,11,89,69,79,106,127,68, -33,-88,-40,38,-122,71,54,67,-54,24,4,8,83,-26,81,-8,-15,-83,-22,31,-26,33,-40,68,37,-36,35,-56,-73,-40,50,-14,21,-107,-51,-19,-14,98,97,113, -30,18,38,-88,-50,-110,3,-77,29,77,4,9,-26,-11,77,87,104,55,-110,-74,-10,-94,-29,-101,-79,37,2,-73,-5,-44,-22,18,-13,-69,-67,-74,-36,-5,87,1, 
  /* [14][0][][] */ -89,-84,-35,29,20,32,-41,-29,13,-13,17,94,-32,-42,-34,-57,78,35,-48,28,-43,28,-23,-73,-14,7,-11,34,-20,101,84,23,-40,-57,-23,-35,-20,87,105,60, -7,-19,-27,16,18,-9,-13,-10,-69,15,-28,-60,-127,-19,-53,-10,54,53,-64,-4,36,-97,-11,-20,-65,2,-37,-94,-5,-25,11,39,-23,-13,-8,-73,19,53,56,-18, -26,-36,14,8,39,-21,-6,-87,18,-62,65,-25,-37,-2,-27,37,-35,41,16,-61,3,61,-51,0,-49,-44,-3,-59,9,39,-8,51,-43,-14,39,32,17,-4,58,93, 
  /* [15][0][][] */ -82,-8,-46,-11,18,-37,80,6,-4,-28,17,95,85,-37,84,16,6,-23,-22,18,-9,34,8,59,6,12,-39,-96,-49,-46,-18,-34,21,-51,49,-17,44,-19,72,-20, -127,-84,-47,5,-9,-25,7,8,-11,-24,69,17,83,35,45,11,36,26,-58,9,-37,-6,62,-29,35,3,38,-9,-83,3,3,23,-34,-63,-16,7,-7,45,68,-21, -20,1,1,-54,30,-60,33,-61,-32,-27,22,101,57,-47,82,26,41,52,39,15,-15,-28,-19,6,18,-33,-39,11,-62,53,47,-33,-58,-79,17,-16,-44,-15,-30,60, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,40 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0035924520343542099, 0.0022671052720397711, 0.0025838005822151899, 0.0029968977905809879, 0.0025551461149007082, 0.0022523796651512384, 0.0034467289224267006, 0.0032754563726484776, 0.0019986494444310665, 0.0024527537170797586, 0.0024875153321772814, 0.0023076350335031748, 0.003416264895349741, 0.0022601096425205469, 0.0028982334770262241, 0.0030891813803464174, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int8_t tensor_data8[32*1*3*16] = { 
  /* [0][0][][] */ 6,9,-42,-69,83,-38,-17,-17,53,23,19,50,3,-22,-3,-41, -62,98,-37,-88,-1,-26,40,91,1,-8,-38,38,4,-27,-41,-86, -27,-61,-93,21,-127,-14,-14,-4,12,-19,-78,-62,45,-70,-73,-69, 
  /* [1][0][][] */ 22,-126,-56,15,-109,-75,-64,-77,21,16,17,-125,22,5,-7,-23, 79,101,20,-76,19,10,-22,62,85,-13,-80,-7,-101,-45,-42,-84, -127,5,49,20,26,37,-30,35,50,-36,78,43,10,45,-61,-3, 
  /* [2][0][][] */ -67,-85,-6,-83,50,-53,-34,-19,-52,-57,44,-7,1,112,22,4, 55,-72,30,-54,42,25,-41,-127,0,22,56,27,-4,-33,20,-38, -38,74,-73,-30,-10,-67,-11,-99,53,-45,-68,-39,-30,75,3,77, 
  /* [3][0][][] */ -127,-15,-43,-90,-43,-30,95,92,-19,2,-28,20,22,-34,28,-33, -46,80,-32,-3,-33,5,19,-31,-79,79,-18,-46,-103,27,11,62, -64,48,-35,43,7,-57,49,75,-55,75,74,-28,-49,24,39,-48, 
  /* [4][0][][] */ 15,80,44,-12,-117,15,-36,34,80,63,-47,-84,-43,-77,-93,-79, -106,-42,42,-127,-58,-46,-107,-51,-1,-3,-76,-105,0,-106,-71,-39, -44,82,73,-42,-98,-109,48,-38,-24,42,44,70,-73,37,-46,-48, 
  /* [5][0][][] */ 57,-122,63,-17,-90,-114,44,-99,-15,47,44,-83,-100,35,-127,-29, -48,-13,4,-84,-98,-35,-86,66,-82,-5,-111,-120,-46,-32,48,60, -100,48,-15,85,-51,1,27,-108,-28,-87,-34,14,8,12,-27,-54, 
  /* [6][0][][] */ 10,10,-5,-52,31,30,-38,-37,-84,21,59,-20,-9,15,-121,17, 78,-103,-9,63,-77,-12,-81,-84,-8,-16,101,-36,-44,-96,-110,-18, 2,-102,36,1,-90,119,-82,-78,-73,-56,100,89,-80,127,66,-90, 
  /* [7][0][][] */ -114,29,-88,8,-8,-52,127,88,-114,-45,30,-68,52,-42,69,-25, -83,60,-40,-27,-8,-63,118,66,-13,66,24,-81,-67,-50,-25,-70, -18,43,-56,-49,-49,40,68,72,-46,-72,41,-83,19,-88,34,-8, 
  /* [8][0][][] */ -95,92,-33,-51,-6,-105,127,106,15,38,-16,88,-105,-73,45,-25, 47,16,76,-46,-42,-31,-46,65,-8,-105,-122,35,-69,11,-111,-110, -69,-58,-101,-51,42,67,-92,-73,75,20,-24,61,74,69,-84,59, 
  /* [9][0][][] */ -91,30,40,-68,-28,97,-28,46,-80,85,16,21,-89,25,59,-51, -33,12,-15,58,-50,37,-3,-90,-29,36,-56,10,-91,-112,92,13, 95,-57,18,3,-18,29,7,-60,34,36,87,56,69,33,-127,-114, 
  /* [10][0][][] */ 53,88,-1,-106,90,-36,98,86,31,-47,-85,85,35,11,-92,-110, -35,-2,17,-109,-74,11,43,-1,-24,-73,-32,32,40,50,-105,-48, 41,114,-37,-127,23,15,-22,-29,84,-1,-2,67,-66,15,56,-52, 
  /* [11][0][][] */ -6,-59,-42,-11,-34,32,-69,-52,19,-28,93,21,-61,-46,4,1, -48,32,-27,-16,33,-16,-45,-41,-59,-21,66,-34,-85,37,-6,-31, -97,2,30,7,52,17,-66,-127,23,62,62,-97,-71,87,12,92, 
  /* [12][0][][] */ 125,-40,101,-9,-12,42,22,31,28,-77,-56,3,-94,-31,6,-40, 30,79,40,-127,97,-68,-28,-67,-15,59,-42,-6,-49,-54,-88,-88, -54,9,-32,-77,93,20,-79,-55,36,-18,-125,-8,-43,-64,-49,-15, 
  /* [13][0][][] */ 13,-120,-115,-46,-110,2,-9,-127,-46,-69,6,30,23,34,9,43, 11,47,-21,-29,93,-33,-77,41,66,-70,-21,79,0,-53,10,48, -101,49,79,1,-22,17,-63,-69,-59,13,121,-91,-121,100,50,105, 
  /* [14][0][][] */ 33,63,-73,-69,14,-92,86,31,-24,-1,-47,11,-65,6,-14,-17, -127,51,-12,-28,25,-61,-3,51,14,-10,-47,-14,41,49,8,-63, 52,77,51,-58,-13,9,21,7,37,-43,16,-73,9,-27,19,-74, 
  /* [15][0][][] */ 50,-6,-47,-62,-3,-9,8,41,60,16,-21,-38,-47,27,-89,14, -56,-56,-16,20,12,52,-107,6,-80,1,60,-94,26,92,17,-7, 14,-68,-16,1,64,-13,-16,-127,-82,-12,37,25,7,-50,-43,-35, 
  /* [16][0][][] */ -14,61,-76,-46,-21,-61,-65,-68,-31,0,7,-4,-71,-6,-64,6, -30,33,-30,-127,36,9,55,32,4,36,-99,59,-3,-11,-90,-82, -13,31,30,32,42,37,-27,38,-62,-1,-7,27,-49,-73,-78,-24, 
  /* [17][0][][] */ 104,-20,-46,-26,-35,-25,58,-28,65,35,-50,31,-127,15,29,-15, 21,22,3,-105,-3,-17,-51,92,-16,37,-17,-53,17,-36,-105,-9, 9,68,-26,-84,58,-24,69,-7,49,-23,-64,64,23,-15,-100,-51, 
  /* [18][0][][] */ 20,-66,35,-97,-1,61,-127,-5,-63,-46,54,3,1,79,70,-61, -59,-38,-17,36,6,68,-40,5,28,-21,98,-2,-62,41,46,9, 39,-58,-47,73,-65,34,-58,-20,22,81,44,-76,-38,98,44,29, 
  /* [19][0][][] */ 11,-16,70,52,-7,79,-9,-44,-77,34,107,-34,-110,102,-14,111, 44,5,4,56,-5,58,-62,-20,-73,98,109,-91,4,74,-18,6, 18,-94,54,74,-58,107,-117,-127,-56,97,107,-32,-18,33,-41,110, 
  /* [20][0][][] */ -11,-18,-5,85,-5,12,-118,78,-55,93,126,77,21,25,20,-47, -106,-127,41,-39,-82,86,-69,38,-24,50,-11,1,25,84,-78,88, 77,-31,-3,-28,-37,-96,-68,-63,32,-95,-45,-61,113,41,-28,16, 
  /* [21][0][][] */ -35,-6,18,23,-49,4,5,-97,-11,-17,32,13,1,-3,-35,46, -68,-67,-7,-57,50,36,-45,-17,-72,45,95,-36,15,-2,45,32, -43,12,19,1,-39,-13,-127,-31,20,66,-20,-15,-28,59,46,-4, 
  /* [22][0][][] */ 29,85,51,12,12,-104,60,-96,76,-51,-68,-21,-50,-88,0,-55, -66,75,5,-127,16,-30,74,-26,-5,3,7,77,67,-42,35,-25, 16,68,40,19,68,-71,0,85,-15,-82,6,29,-45,-65,-79,-66, 
  /* [23][0][][] */ -57,-39,102,65,-81,54,19,-98,-79,21,58,79,58,50,75,-19, 43,12,-54,56,-111,94,-46,-63,82,56,-58,49,9,127,-22,20, 90,-91,17,93,-62,-32,-73,-52,33,-42,-37,61,30,34,-72,55, 
  /* [24][0][][] */ -32,-11,4,32,-20,60,67,114,-53,-67,-63,23,-66,-45,-66,29, -14,57,112,32,118,54,50,68,47,44,-103,73,19,-85,-61,-90, -64,34,-30,-72,-13,-33,42,112,-33,-5,-85,108,127,-9,-101,-74, 
  /* [25][0][][] */ -127,-4,66,-64,83,-76,0,-48,-3,4,-42,23,9,66,-21,-74, 23,65,90,-40,5,-25,42,-10,5,-15,25,65,-53,-77,-26,33, -127,-62,-14,-114,24,-84,17,-63,54,-28,-120,-26,83,36,-7,-47, 
  /* [26][0][][] */ -22,-34,-56,-21,4,20,-13,-127,-14,-51,22,-39,7,36,-13,42, -96,-18,-32,7,57,-32,-94,28,-43,70,41,4,-69,15,18,12, -6,-41,-46,-48,-20,39,-71,-39,-5,-5,47,-40,-52,18,34,53, 
  /* [27][0][][] */ -29,54,-39,12,63,-42,42,99,47,58,-93,10,-44,49,17,-16, -31,-19,-19,20,-64,-41,-51,-7,-70,5,-2,-65,0,7,-81,-10, 28,13,33,-55,19,-18,-35,-80,-30,-25,71,-63,-13,74,127,120, 
  /* [28][0][][] */ -29,-24,44,-123,3,-18,-88,-16,26,-49,74,45,-20,30,43,13, -70,-127,-28,8,-12,39,-107,9,-78,17,42,47,-64,27,-31,-9, -5,24,-71,0,-2,6,-23,-96,-7,30,89,-113,-32,-3,99,-30, 
  /* [29][0][][] */ -31,-9,-52,-14,-73,-21,29,25,-105,50,1,-68,53,22,-14,56, -5,-72,26,60,-127,-23,58,71,33,-14,-4,-12,15,15,-51,-6, 101,-4,50,75,-70,54,28,-20,-27,-10,-84,32,27,-6,29,54, 
  /* [30][0][][] */ 17,0,65,-69,3,25,1,-76,49,-78,38,-26,-25,-50,-52,13, 127,-46,-20,27,64,57,-64,-34,6,41,-21,12,36,4,-41,69, -28,-44,20,-77,32,59,-109,-73,-54,62,79,-7,-34,-9,36,22, 
  /* [31][0][][] */ 31,54,-92,-39,-1,-59,88,17,-70,-43,27,2,6,-62,22,-17, 25,-36,26,18,-51,-63,127,95,-25,30,-8,10,90,-25,5,-46, -34,14,56,51,-82,5,58,104,1,34,11,26,15,-18,-41,31, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant8_scale = { 32, { 0.0037598626222461462, 0.0033196927979588509, 0.0021692090667784214, 0.0029830802232027054, 0.0019390205852687359, 0.0017873662291094661, 0.001945429015904665, 0.0028242750559002161, 0.0016949479468166828, 0.0022113022860139608, 0.0023939446546137333, 0.0030460611451417208, 0.0025723027065396309, 0.0021669752895832062, 0.0031672797631472349, 0.0026488569565117359, 0.0029416149482131004, 0.0023311965633183718, 0.0026115039363503456, 0.0023382285144180059, 0.0023495519999414682, 0.0035942159593105316, 0.0025717106182128191, 0.0021977862343192101, 0.0020879553630948067, 0.0026488485746085644, 0.0037107500247657299, 0.0028758358675986528, 0.0026445270050317049, 0.0034417305141687393, 0.003126546973362565, 0.0026982000563293695, } };
const TfArray<32, int> quant8_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[64*1*3*32] = { 
  /* [0][0][][] */ -86,76,17,54,12,-40,-56,100,45,-22,2,35,53,-25,0,-28,46,19,-65,-30,-66,11,12,-92,-8,3,-18,-12,-34,13,6,-36, 31,7,4,60,-34,4,-20,82,25,-44,4,1,127,15,68,61,101,52,-53,-49,-88,-46,91,-43,35,9,-8,-12,61,10,0,10, -9,-62,-21,48,48,-75,-53,28,15,34,-27,-30,43,-4,-25,-37,-5,-35,-35,-41,-9,4,40,-40,21,-5,13,-36,-37,7,5,46, 
  /* [1][0][][] */ 83,-58,-33,0,-44,-5,60,4,49,43,-36,110,-23,20,27,-30,-17,49,-6,36,-2,10,-80,-95,-80,23,80,-21,29,27,32,-37, 29,18,41,-24,-60,2,39,27,29,48,-18,61,-6,20,-48,-47,42,23,-21,71,-27,-4,-59,26,-56,33,28,9,-58,-60,-16,-72, 6,41,26,-32,70,13,-32,-21,-27,-68,-41,66,-127,62,-38,76,-47,-68,75,-16,13,63,-1,-63,-58,-36,14,91,84,-39,63,39, 
  /* [2][0][][] */ -127,73,1,33,-26,-3,-35,35,-18,-21,59,31,13,21,1,37,26,10,10,7,-32,-16,46,-53,25,33,-53,33,-8,-58,20,10, -39,47,18,10,-21,44,-50,55,-29,0,30,-33,37,17,29,31,-14,18,-31,-16,35,-11,-4,-40,-28,2,17,-23,12,-22,-28,52, -30,-66,21,70,23,29,7,33,14,25,18,-52,-5,-57,47,-46,33,-2,-19,-42,42,-48,15,-6,6,20,-66,-19,-8,45,-24,23, 
  /* [3][0][][] */ -93,-106,38,46,35,54,0,90,-4,-2,21,33,-29,-1,13,16,25,31,-25,-5,-39,44,-19,-31,-35,30,34,-75,-66,-44,-86,-59, 9,-3,-28,52,-24,30,-21,12,-1,4,-40,8,-106,33,12,33,-23,-29,5,67,107,24,-88,23,4,-60,72,40,18,73,-64,-10, -48,105,-36,10,-13,10,44,-22,-34,47,0,-25,7,72,-64,-35,37,14,-69,38,-127,-21,35,-14,35,-76,-55,-30,-34,24,22,48, 
  /* [4][0][][] */ 9,-52,8,20,-5,10,-55,68,-4,8,-40,45,-18,-127,-64,-32,0,-87,-75,19,10,-58,-60,-47,-84,-47,-21,-99,-2,21,-100,6, -9,-42,50,58,-45,52,-78,-89,-14,4,-47,-77,3,-71,23,-56,-84,-61,41,-94,-116,-21,-54,-53,-74,-2,-26,-74,-79,-113,2,-57, -92,12,8,-68,-31,-62,27,25,-37,12,14,-103,-25,-3,3,-72,11,-18,19,-3,-22,26,-69,46,-52,55,-7,-26,-29,24,27,-86, 
  /* [5][0][][] */ -1,-15,-9,63,6,56,-13,34,51,-23,-17,-1,-11,34,-22,26,-36,-60,58,25,-61,-31,-14,3,-15,-36,22,-22,47,-72,-40,-57, -36,8,-16,-10,-18,-38,-41,-55,40,13,-14,76,-76,30,33,-19,-36,-30,46,31,9,59,27,-13,-57,-62,84,-27,55,-35,44,1, 50,-43,47,15,-69,5,82,-33,-9,29,-7,42,16,-2,2,25,4,-41,34,21,-55,-23,-67,36,-78,-31,-21,47,39,-127,-53,-92, 
  /* [6][0][][] */ -73,-103,-27,28,10,20,-32,8,39,29,-23,-36,4,-23,-15,-113,86,-33,23,14,-7,4,18,7,37,49,-3,-17,-31,-101,2,-2, 127,94,-7,8,-54,-55,57,58,-26,26,-6,17,-6,6,12,30,-8,9,21,-17,91,-28,-17,29,21,47,-21,91,57,-6,-35,-7, -90,2,32,24,40,-51,-39,61,-23,-45,-64,-19,-11,-35,26,7,43,5,-55,-23,46,-9,39,13,15,-73,-39,-68,14,45,4,-42, 
  /* [7][0][][] */ 53,57,-37,12,38,8,-22,109,-17,-16,3,-11,59,-4,-35,-9,-12,29,-1,-55,28,-16,41,-54,8,12,-23,57,-6,4,27,35, 73,-89,-2,22,-34,-35,36,95,7,4,3,5,89,-47,39,-37,1,17,-27,-36,-127,-45,12,-59,-9,65,60,-22,3,70,39,55, -75,-49,39,-5,41,34,-67,-19,-43,-29,-2,-6,-2,8,-78,22,43,33,19,16,33,-13,-51,-78,-38,-40,-55,-22,10,-97,-3,-42, 
  /* [8][0][][] */ -34,-16,31,-36,27,-24,16,38,-31,-69,-2,-59,8,-24,-75,-42,-51,-85,-1,-48,-25,-100,-43,-86,47,-46,-31,-3,-21,-111,12,-67, -47,99,70,-16,-66,-56,10,4,63,-57,17,-5,41,83,39,9,64,-19,0,-66,-47,0,92,-22,25,-2,12,127,51,4,-7,35, -117,40,34,57,-49,51,-8,42,-27,15,53,-1,-34,15,-31,-3,30,46,-20,-37,-32,-2,-14,-74,-40,23,32,-3,-57,-41,-52,54, 
  /* [9][0][][] */ 5,-30,-36,-3,32,63,74,10,23,-6,3,29,-70,53,-1,-32,-29,-46,61,85,63,-3,-38,33,-24,27,-4,-27,-2,-24,19,11, 85,16,-2,-43,21,-30,7,-18,32,-7,-14,92,-40,45,15,-12,14,-57,61,53,12,95,9,27,-16,-10,45,-43,-25,-27,7,-19, 79,9,-33,-13,25,24,8,-127,-15,76,33,21,-66,31,-1,56,11,38,58,24,4,-3,-71,-5,-54,-4,31,42,53,0,8,19, 
  /* [10][0][][] */ -55,-86,-80,-98,-4,-66,23,48,60,-14,-97,-66,24,-63,62,63,-17,-88,71,-93,-90,1,40,17,-127,-36,-36,43,-42,21,-72,48, 15,17,-95,-76,-72,-67,-77,-88,-17,26,-68,27,50,-29,-60,-54,-46,-61,-38,-39,-51,-51,-38,-8,-48,61,77,28,50,-43,-6,-43, 13,32,-69,52,44,25,-85,14,-26,60,-74,-55,-41,13,-34,-13,34,32,58,-98,-26,-33,-73,6,43,-51,-40,-50,26,2,-3,-92, 
  /* [11][0][][] */ 15,-64,27,73,-40,41,-39,17,34,-43,41,50,25,0,32,-73,46,6,73,38,-68,-24,-5,-12,34,62,82,-23,-12,-30,-51,40, 16,24,24,-40,37,4,13,-19,7,1,-4,-7,-65,-18,-42,20,-4,35,19,14,127,-3,21,46,-34,-49,-47,89,15,-7,-39,3, -6,1,-54,-46,33,-10,-4,-67,-46,-12,-24,-51,14,-24,-11,19,-58,-32,-18,-70,-39,-20,-11,-26,-45,-57,-53,-58,-79,-47,-15,-117, 
  /* [12][0][][] */ 15,75,0,73,38,-53,46,2,19,-87,-33,-70,3,-61,-46,-62,-3,-32,-71,-6,7,82,-2,-10,26,-45,17,-15,76,8,-30,33, 49,15,8,-99,-29,42,-111,-32,-96,-37,10,-33,-46,-102,-93,-39,-8,-50,1,-78,1,-85,-60,29,-87,-45,-66,-85,-27,-49,-51,43, -82,10,22,27,-37,44,18,42,-44,-29,10,-70,9,22,32,11,16,-85,32,57,-64,37,-35,50,17,-1,44,-44,-51,-127,-4,-70, 
  /* [13][0][][] */ -14,-4,33,52,-32,44,-56,23,13,0,-115,-2,-65,-27,-94,-73,42,53,-77,-47,60,-11,13,127,55,-93,18,52,-61,17,-15,-26, 50,46,53,-55,3,27,-59,48,-47,-18,-2,0,43,2,-20,-52,29,49,-25,-61,-66,-40,76,8,-42,33,2,-64,-85,-23,-49,20, -16,36,15,59,-20,-29,-91,63,15,22,-76,-92,-44,-21,-94,69,-73,-50,-65,7,-49,11,60,-41,-51,-33,74,-10,5,-8,-11,-97, 
  /* [14][0][][] */ 127,80,46,1,32,13,-10,92,-50,-48,58,10,23,59,5,29,14,8,-83,43,-102,-63,-10,-102,78,-47,-20,43,54,-6,65,12, 91,-86,-2,1,7,-10,-4,104,-44,-68,61,27,39,0,53,-43,31,50,-55,-57,-36,0,14,-97,75,59,46,-52,-3,13,90,25, -17,43,-14,80,20,54,44,-61,19,11,21,66,-26,101,-64,83,46,-33,43,92,83,65,-74,-18,-63,-4,65,15,59,-64,-34,6, 
  /* [15][0][][] */ -119,23,-19,73,-25,-1,-25,57,6,9,21,30,81,40,54,67,31,-11,-64,-45,-14,-21,36,-67,7,-38,-15,84,-38,-23,-14,56, 75,-94,-29,-25,-4,47,15,127,32,-38,-18,7,74,-60,36,18,39,8,-9,-28,-87,-22,43,-80,-7,53,23,1,-48,14,37,19, -3,-50,13,37,31,-29,16,101,6,-3,31,-68,-41,-1,17,-7,22,10,-18,-64,38,-101,-14,-14,25,2,-72,30,-29,48,-86,33, 
  /* [16][0][][] */ 75,27,-12,-18,30,-24,39,-8,-4,-21,49,24,31,44,26,14,-23,11,4,-14,-60,-31,-2,-30,74,-21,-23,77,57,-55,44,15, -26,3,-45,26,13,7,-15,13,-91,3,-30,-28,-100,-62,-33,-35,-22,11,-34,-10,13,4,-92,3,-40,-40,45,-34,18,-92,-63,45, 37,14,-25,127,50,-21,-6,44,-5,-29,-24,-23,-63,-67,-27,46,16,-4,56,12,70,6,12,-35,7,-45,29,-13,-25,-12,-46,21, 
  /* [17][0][][] */ 12,19,36,7,68,-76,66,-17,-17,-60,-84,18,43,9,-25,-53,45,85,-36,52,24,34,-70,-89,-27,-53,15,-78,26,-108,33,-61, 69,-36,39,-12,18,48,-14,11,1,53,-31,27,-47,-127,-75,26,63,79,-2,39,50,-31,-98,36,49,26,-30,-72,-71,-8,-30,-17, 60,40,-33,70,-54,-30,-10,-29,69,-101,52,88,-68,28,-37,83,-85,13,46,88,-25,101,47,-36,23,35,94,24,87,-64,47,34, 
  /* [18][0][][] */ 28,-40,-42,95,-2,-23,3,85,50,90,-16,96,-31,-47,-64,38,-88,1,84,-12,-75,69,-93,-74,-116,-23,-5,8,57,-92,49,33, -20,41,-21,44,-24,-8,-12,-126,-25,7,-62,43,-37,72,-103,-11,-49,-56,32,92,24,127,-21,76,43,1,120,-50,-34,21,81,-44, 70,115,39,-21,74,-9,-7,-23,-29,19,91,-10,-57,-17,59,46,-33,7,-29,104,-18,-36,37,46,74,61,-6,2,-9,-27,74,-23, 
  /* [19][0][][] */ -2,33,-92,-29,31,-74,-65,-3,-43,-92,-43,-86,-51,-41,-20,-17,-5,40,32,-75,-56,1,15,55,-25,-6,64,-100,-22,26,-10,-19, 31,-43,-98,-52,-49,-18,-77,73,25,19,21,22,-98,-127,-82,-114,-96,-126,7,-92,6,-99,68,-54,-21,-126,-18,-68,-53,-61,-36,-95, 10,-84,3,78,-39,23,50,-30,-16,-49,-100,-69,-57,-16,20,75,75,-74,93,-75,-17,84,65,54,-60,-100,-99,-79,-54,88,1,-84, 
  /* [20][0][][] */ 28,-21,-62,17,67,41,-22,1,-34,29,-7,59,-8,29,3,-29,-5,12,-26,7,-112,2,-20,-64,8,-83,8,-5,10,-115,7,-65, -30,-34,-19,-25,-38,28,-29,-45,39,18,-75,60,-99,20,9,96,-88,-45,-17,69,92,17,-108,24,-44,-70,67,21,-1,-117,40,-2, -39,48,16,-22,1,17,64,24,33,-43,-39,72,6,68,42,26,-12,42,25,66,-23,69,35,-48,22,-11,9,-44,-34,-127,41,12, 
  /* [21][0][][] */ -73,-14,-24,21,20,51,16,95,-30,51,-44,-61,-48,-19,-17,-92,-1,2,-30,-104,62,-127,-56,-27,-13,0,-112,27,-41,-2,-90,25, -41,64,39,29,-45,45,-1,71,-5,-44,45,46,26,25,73,-10,-5,44,-56,3,-73,-104,61,-93,72,-18,-24,20,44,-58,30,62, 43,-12,64,-1,-18,-29,-66,48,-43,48,12,-38,12,-66,57,-41,-35,-14,-20,-34,0,-40,94,-44,67,52,-59,-23,9,28,-1,10, 
  /* [22][0][][] */ 52,2,19,19,0,-2,7,-9,-17,20,-5,63,-23,29,12,-25,9,-41,-20,55,-61,5,9,-95,-7,19,-18,-50,15,-99,5,-27, -116,-18,-32,15,51,-7,36,-3,-30,61,-34,29,-53,-7,25,18,-28,-1,20,70,62,73,-91,30,-85,-16,50,46,-23,-127,-17,-46, -36,49,6,45,-37,23,38,7,30,6,48,58,-37,57,-5,38,-37,-24,1,16,-89,-28,-38,-78,17,52,-25,32,-5,-121,27,-59, 
  /* [23][0][][] */ -15,47,-37,-53,26,-21,20,-83,-7,-29,-78,-34,8,-57,-90,-82,-63,-16,-121,-41,-35,-30,5,2,-4,-37,-32,-127,-18,8,13,53, 112,-107,29,22,45,25,43,35,-95,46,-2,-46,-78,-31,-74,31,-12,68,55,-5,8,19,-33,104,17,-76,34,-91,-35,85,-21,10, 88,110,-1,-65,-6,-35,45,-79,-6,-40,35,55,43,111,14,-4,7,77,51,80,-18,-34,-5,-76,47,-22,56,-5,-16,45,84,34, 
  /* [24][0][][] */ -61,-120,-35,-59,44,-65,-52,-23,-66,-19,-93,-80,23,54,19,-20,-44,10,55,-32,9,51,-12,-28,20,-35,-80,-80,-81,16,-62,-127, -69,47,-4,-33,-66,-80,56,-31,-41,44,-78,-15,76,-74,-77,-87,35,-78,-47,-109,1,20,-109,-76,-26,-33,-32,-74,-23,-20,-72,-28, 12,-82,19,-61,37,11,4,44,32,-74,47,-62,-84,28,2,-56,-17,-7,-9,-35,-64,-44,-56,28,1,-84,-77,-12,-19,-60,-17,-33, 
  /* [25][0][][] */ -73,-38,13,-68,-45,-66,55,-4,67,16,55,-33,108,15,23,-10,-69,-1,46,2,-69,18,106,-59,-47,107,16,-127,-86,-65,80,1, -90,84,-8,8,-57,-73,-89,-96,13,30,-39,-72,26,50,-30,82,56,-6,-74,-36,2,51,29,-23,-38,43,59,-93,-20,23,11,-64, 86,-15,-1,-59,-10,-53,-16,58,51,-11,-27,-49,26,-107,-76,-76,6,-110,-71,-113,45,-88,69,22,-19,-21,-30,-16,60,32,28,57, 
  /* [26][0][][] */ 127,17,59,-54,9,43,9,-51,-59,-58,90,31,39,57,71,36,-15,-10,-47,42,-18,-14,-29,10,76,16,-49,86,61,-59,17,-65, -109,13,39,26,-59,-12,-45,78,45,-8,-2,-1,-33,-12,-15,-22,-37,-48,-32,-37,-37,-7,1,-94,-31,-28,-4,-2,64,-45,-23,38, -109,8,20,73,-11,5,22,-9,-52,11,8,-2,42,57,-38,22,65,-7,25,43,7,23,12,73,57,38,-25,12,38,-48,-41,-32, 
  /* [27][0][][] */ -127,34,-5,-31,46,-26,-13,3,38,-60,71,23,48,37,95,14,2,1,-27,-18,32,-4,58,-86,86,61,-6,52,-17,-34,-5,52, -66,-26,42,53,63,-19,-27,52,-59,30,48,7,-21,21,-53,-44,60,-52,32,-51,-47,-38,49,-59,31,-26,20,-77,-17,-17,-23,14, 36,10,-2,59,20,56,-8,19,53,-65,44,16,-12,-29,10,-13,29,-31,0,-66,20,-58,-19,-77,88,50,-39,13,0,20,-21,-20, 
  /* [28][0][][] */ 27,9,-21,-47,12,27,-50,18,18,-52,-57,-20,-40,-37,-17,-49,3,-60,-32,-61,-32,-10,-58,-39,-12,-47,-21,-51,-38,-6,-60,-39, 6,33,33,35,14,42,-5,-16,1,23,35,8,23,48,35,29,18,2,-18,-47,-5,-32,19,1,37,-3,-23,59,-19,-31,31,-7, -127,-8,3,2,-24,-13,-26,46,-39,14,-21,-10,16,-17,15,-18,-5,22,1,-18,-34,-16,-15,-30,-19,21,-10,-9,18,-17,7,45, 
  /* [29][0][][] */ -53,-17,-69,66,-22,56,63,43,-1,24,-56,26,40,-43,8,-30,5,4,-36,7,64,-92,-25,15,83,-85,-86,-88,3,-48,-74,-5, 14,45,-31,-72,-48,77,29,38,-34,8,-45,-36,-97,-96,-15,-62,-41,29,29,-23,-71,17,33,24,42,-61,10,-72,-33,6,-109,-100, 46,-18,-55,38,-50,65,4,29,-26,-58,-37,4,-7,-16,-15,-53,-51,-91,8,19,-46,-97,-66,38,17,-31,-56,-8,-24,-127,-67,12, 
  /* [30][0][][] */ 22,-50,-45,9,49,-54,21,75,-60,51,-107,82,40,-24,47,19,48,61,7,-16,43,72,31,-36,-127,33,89,-2,91,-38,-2,-120, -12,-72,41,110,-5,22,115,22,35,40,-16,5,-21,-2,-39,-90,-28,-64,-45,-21,-110,-74,1,-16,-61,-2,-65,58,37,97,38,-18, -71,62,57,-65,-63,21,-38,12,32,35,40,38,42,-5,-2,108,17,119,-99,30,-23,43,-11,-111,-48,-35,81,-87,-13,27,53,11, 
  /* [31][0][][] */ -127,40,3,14,-17,-35,15,29,22,15,33,-30,57,-12,21,32,5,-6,18,-79,4,-46,21,-25,73,14,-72,-13,31,-4,-32,-22, -62,63,44,56,3,-26,5,12,-16,8,34,55,44,56,60,-8,61,40,-96,-79,-92,-27,8,-70,-21,-9,2,8,14,-55,12,-47, -8,-66,45,7,-3,-32,-21,69,-13,-28,35,-33,47,-36,-13,-36,-15,21,-11,-47,2,-21,59,-53,54,23,-12,11,-47,20,10,50, 
  /* [32][0][][] */ -11,-7,-19,68,-41,69,83,-43,42,-24,-91,109,1,65,-48,-30,-19,25,56,36,15,66,-66,42,-70,32,88,-25,31,43,28,30, 2,81,73,-21,8,-20,33,28,-19,-4,-22,34,10,-17,-28,-25,-47,53,-6,24,-38,63,-75,41,-31,-73,13,68,43,13,-65,8, 26,47,70,-63,9,-56,84,-127,-53,15,-24,92,-32,85,-37,114,18,36,25,-15,60,-3,-86,-40,-50,27,84,5,70,-109,27,-76, 
  /* [33][0][][] */ 72,46,-43,-63,76,50,12,-122,-51,-111,39,51,64,-51,11,-61,85,-122,47,-77,-40,64,0,15,24,-20,-67,-29,-120,25,-65,-33, -10,5,48,-60,54,-119,-60,-19,26,-79,-75,-126,35,-32,-17,5,-4,-46,39,87,21,-61,-119,-127,69,-111,-72,82,-56,-42,-38,-47, 69,-49,-87,-65,-92,-30,-18,85,-125,-65,-94,24,4,-78,-77,-96,-15,3,-116,-34,-112,18,-34,-58,-113,80,-3,-97,-82,52,48,-36, 
  /* [34][0][][] */ 54,-105,34,59,-14,40,-23,21,18,70,-19,6,-2,31,8,-1,-77,-2,89,21,85,88,-61,-38,-127,24,123,10,71,2,40,-48, 1,-14,-47,-60,0,36,24,-63,53,-30,-32,102,-74,-29,-77,-55,12,40,32,42,-32,25,-16,-59,-36,19,104,38,24,-107,33,-111, -16,-24,11,23,59,-30,-37,-18,-10,23,-52,59,-96,-33,55,66,1,-29,55,88,41,-39,-57,44,-87,-28,68,-14,72,-86,8,-81, 
  /* [35][0][][] */ -1,-8,1,-74,-1,22,-18,-39,-61,-36,-72,-10,-47,-62,-32,-32,10,-102,-1,-31,-42,-32,-66,-80,-73,-55,31,-62,26,-54,-49,-95, -47,15,3,21,32,24,-8,29,-39,7,60,-11,42,54,86,2,59,-88,1,53,-64,-59,14,-80,-5,-25,56,72,5,-69,34,-7, -127,-46,-22,15,-27,-18,-62,52,-60,21,-31,-17,-46,17,-1,-41,-7,7,1,-11,106,-1,-38,26,-4,-9,29,23,10,-1,-47,67, 
  /* [36][0][][] */ 23,72,6,-67,51,-25,50,-48,-69,-57,-17,63,12,28,29,15,-30,-14,-27,52,-58,36,-1,11,-78,-41,-18,-29,15,-2,20,-5, -8,-12,29,21,-32,-40,-14,-22,-56,-22,-45,30,19,-21,-9,23,-41,-62,58,18,-67,-5,0,-17,-101,-3,34,41,36,-127,61,-66, 40,43,30,-14,25,2,51,18,-33,64,-32,-7,-45,31,12,18,19,15,27,-15,14,-12,14,-30,-8,13,-46,0,60,-11,-51,-46, 
  /* [37][0][][] */ 82,-25,33,43,-7,6,4,51,-21,26,-16,-10,-3,5,8,18,7,17,-13,37,-54,-3,9,-66,-21,-21,52,-27,1,-64,-21,-11, -7,11,14,15,-15,-1,5,1,-5,6,-3,43,6,-15,-28,42,-34,-24,34,14,55,41,-45,24,-37,16,43,-13,0,-31,-9,-29, 127,25,23,6,11,16,27,-24,2,-20,22,34,7,15,-15,32,21,39,-8,22,-6,32,-35,-45,24,-27,-8,17,-19,-50,32,-7, 
  /* [38][0][][] */ -127,62,-22,53,35,-2,1,99,28,-74,68,18,63,14,61,-1,27,-9,-56,-24,-63,-23,34,-102,66,1,-58,3,2,-7,38,50, -39,-52,40,-16,-37,-36,-30,58,7,44,15,35,78,-51,-22,-24,24,-4,-15,-70,-72,-13,1,-73,-1,15,8,-44,-22,-7,3,-6, 56,-66,-28,100,-2,17,-25,99,17,27,37,-17,-1,-9,28,-47,12,-13,-33,-74,5,-17,9,-37,79,-5,-46,18,26,46,12,26, 
  /* [39][0][][] */ 70,13,-37,-76,72,58,-64,42,-63,-5,-19,-113,39,46,-44,-106,-68,-73,-5,24,-64,-25,74,20,-71,-3,-21,-15,-99,-8,-20,-41, 17,51,-1,-107,-27,-25,-106,-23,-27,-65,-68,-100,-1,-13,71,-111,-3,-51,-50,19,30,-114,2,-66,15,-81,-18,-43,-26,23,-92,11, -31,-92,-40,-62,-32,19,16,22,7,-8,2,-47,6,-13,11,-17,-61,1,-114,-58,-60,-82,-115,-1,-101,-75,-25,-127,29,20,-3,-92, 
  /* [40][0][][] */ 24,-13,-72,-8,3,-48,-31,-47,-42,-57,-97,-73,-38,-58,-48,6,-17,-46,-13,-4,55,-56,-127,63,-40,-27,-30,1,-30,39,-115,-61, 61,27,-55,-7,16,-13,-37,12,37,-68,22,48,37,47,6,46,42,-3,-76,-28,25,-62,-29,-25,12,-47,-3,-8,20,-54,14,19, 79,-50,-17,-24,45,32,-50,-3,1,47,9,23,55,-74,8,29,5,-13,-18,-29,25,34,26,-40,-28,28,49,-69,10,-65,55,53, 
  /* [41][0][][] */ -94,-115,5,31,74,-55,14,21,-43,10,-8,-49,-44,-66,33,-28,41,-22,35,-44,2,17,13,-73,-10,42,48,-42,-39,-75,-57,10, -60,-36,23,36,-18,36,36,102,9,-43,11,-12,44,-7,28,-57,-46,-71,-12,-60,14,-36,46,-60,-127,-52,25,-70,-15,32,-4,-32, -2,55,23,-86,-17,50,3,114,-14,-42,63,33,0,-2,53,-50,10,70,20,-64,31,-82,-39,-20,29,15,-59,8,-58,28,-42,12, 
  /* [42][0][][] */ 92,92,22,-14,5,28,13,-3,53,-5,57,28,31,15,41,32,-31,-16,-33,-12,-127,-47,-13,-68,11,-24,-38,47,36,-23,30,-56, -50,-4,-43,-17,-26,39,-36,-3,-11,-6,-29,36,-55,10,-8,-22,-43,-42,2,-17,35,-36,-47,-65,-25,-20,76,-14,21,-45,13,-12, -77,73,-75,-17,8,-25,-5,-29,-1,23,10,42,-81,66,-22,43,41,-21,70,9,44,15,-19,-35,-9,8,82,48,22,-8,-52,-21, 
  /* [43][0][][] */ -58,35,-18,-21,-30,4,-36,-42,-42,-16,-3,49,-110,30,21,10,75,-41,69,-7,-42,-29,-59,41,18,-43,0,-21,58,-77,46,-20, -94,31,63,-41,59,-67,44,-23,-64,37,-18,-29,-70,63,28,40,-41,-45,58,106,59,62,-72,-45,6,-64,-44,61,50,-10,-2,42, -2,-30,-22,29,5,-10,10,-13,-19,-2,8,-67,-93,-79,-38,-74,32,20,-15,-45,7,22,-4,-7,-11,-39,-101,11,-4,34,-127,42, 
  /* [44][0][][] */ -88,-73,24,-54,-27,60,-4,25,12,49,-10,71,-30,-89,41,-73,-100,-19,22,-53,-58,-23,-108,-90,-127,-78,68,43,56,-105,21,-36, -67,15,54,-1,63,-72,11,-64,-11,28,57,-18,-74,5,66,-33,-2,-46,-3,3,-75,-91,46,20,-22,-12,62,9,0,-116,-36,-45, -27,24,54,51,57,-57,-32,95,-98,31,28,74,-83,64,3,77,22,12,-4,13,109,24,-51,-16,-63,12,9,75,90,-45,42,36, 
  /* [45][0][][] */ -44,22,46,9,37,-4,34,-90,33,9,-11,-44,-10,33,70,-27,24,36,-41,-78,-33,-82,87,44,56,-21,19,10,59,77,-72,17, -117,18,66,-74,-14,40,3,-45,90,48,-48,6,126,-64,-60,-27,-69,25,-71,-19,-109,5,42,-46,-44,-52,-16,-65,-37,-48,-37,-9, 110,-127,-51,-95,-23,41,5,-61,71,-78,-6,7,66,9,13,17,62,0,-7,-32,41,35,70,-21,35,42,17,6,0,-55,38,-31, 
  /* [46][0][][] */ 4,-2,-68,-50,32,-22,-10,-72,2,-29,19,-94,-52,16,-61,-100,20,30,-115,-122,-97,-84,-57,15,-82,23,-59,-32,-71,-9,-1,-45, 46,-81,-49,45,-18,-28,21,40,-44,-4,5,36,-40,17,-47,-78,-15,36,-35,-56,-74,4,-47,29,-17,26,29,-57,-77,-127,-92,-37, -75,-106,61,-58,-42,60,-80,-74,-38,-65,-52,-50,-43,7,5,-6,24,-17,26,-79,-14,15,-70,15,-97,1,21,-114,2,14,50,-40, 
  /* [47][0][][] */ -127,71,11,100,-50,2,-39,90,6,-37,35,33,62,38,21,-2,-13,30,-14,-32,-97,0,62,-74,27,-30,7,45,-41,-15,19,-39, 61,-75,-28,1,-25,20,-8,100,-11,19,-9,1,57,-28,22,-61,-16,35,-70,-62,-76,14,51,-36,38,52,-7,25,20,-36,-27,42, -4,-9,21,0,-28,33,-51,30,15,-16,-26,-55,-15,-11,48,-1,53,42,-4,-1,-42,-21,32,-87,-6,-32,-45,9,14,19,-32,34, 
  /* [48][0][][] */ -4,10,32,108,16,-35,-39,101,-9,-24,-10,-12,46,-6,47,-25,1,27,-27,-84,-15,-29,-12,-59,28,-34,-3,15,-67,2,-51,22, 103,-11,-2,48,-31,25,-8,100,-9,1,-23,-28,26,-89,14,-73,31,23,-113,-94,-46,-56,41,-127,17,0,-59,-29,-85,15,-53,58, 108,-17,-20,4,6,-8,-38,90,70,-60,6,-55,-31,-20,13,-28,23,10,-9,-32,-31,-73,26,-69,24,44,-70,-14,-40,5,-31,44, 
  /* [49][0][][] */ -79,-6,-74,37,68,-94,-76,57,-61,29,-48,-22,-14,-91,-24,0,69,-86,26,-37,-35,65,-57,-42,38,-45,-33,-48,-71,-28,40,16, 20,-30,-76,-16,19,-7,-14,-20,-15,-67,-8,42,8,2,45,2,-71,-65,46,14,12,-68,12,-17,-57,-81,-127,-36,-82,-85,-54,-59, 89,-85,17,-45,-11,67,26,59,-89,-70,15,-61,-6,14,-21,33,-54,-59,-20,23,20,28,-79,-36,-5,-90,-57,0,23,-90,48,-24, 
  /* [50][0][][] */ -80,-84,-90,-80,-59,72,-29,43,52,-33,-127,-99,-29,-82,-92,-126,-72,-103,84,-92,87,-13,31,57,42,-12,-113,0,-112,-25,45,-44, 53,-38,57,-28,-23,-16,23,-26,-12,44,33,-92,4,-13,-17,-48,51,-21,-75,-87,-98,-15,-12,8,-102,-105,48,-72,79,10,-124,-90, -16,-51,70,-17,-114,-86,-21,-91,40,70,83,-56,-34,-15,15,72,26,-89,26,63,-82,-17,34,-64,-88,-122,-109,77,-5,-31,-122,-111, 
  /* [51][0][][] */ 78,-81,-42,-13,21,23,45,5,-85,-59,-20,9,-35,21,-86,-50,40,30,-4,-38,-63,-51,-65,-65,-110,48,59,62,-28,-127,-53,-102, -10,67,7,-83,-17,-57,-41,-49,52,9,96,58,-28,68,30,81,39,12,-25,16,17,-102,42,-22,40,44,-74,102,74,-97,-26,45, 44,21,26,-19,-12,48,6,-1,-52,31,39,-42,-4,-27,-19,-17,-22,80,10,-58,60,-47,65,-8,-53,19,-35,-22,22,-96,-40,67, 
  /* [52][0][][] */ 66,43,-118,-21,-2,-54,-16,-22,33,-26,32,-71,39,-116,11,43,51,-4,-74,65,71,-43,65,-87,-40,51,-61,-9,49,-9,-93,63, -111,28,-10,58,20,-67,-22,-65,38,49,-11,-21,-12,-107,-118,-48,-71,-20,-70,-95,-118,-65,-61,-69,-114,-43,-62,82,-107,-107,-102,-22, -48,-35,76,-127,20,-43,-51,-76,-17,35,-32,8,21,-10,-26,-99,-71,-112,-54,-18,49,-65,76,-79,46,-38,121,-7,-70,21,-85,-86, 
  /* [53][0][][] */ 1,49,44,-63,43,8,-29,-40,6,23,38,22,70,31,-36,-36,-48,-2,-52,-68,-88,33,34,2,-12,10,-84,-53,4,5,-19,-31, -66,-30,-25,-116,9,-16,-31,-116,25,7,46,60,50,7,-27,35,66,-42,-70,-25,-127,-35,74,-29,2,56,-33,-53,9,-85,69,-60, 79,-80,-46,-43,-62,-36,-10,-29,38,-31,-24,25,71,-59,48,12,10,21,33,-69,47,-38,50,-9,7,55,-4,-33,-14,81,18,23, 
  /* [54][0][][] */ -127,25,-25,62,41,0,-45,24,10,19,52,-14,-14,-49,-35,-17,-42,26,-5,-31,-6,-65,56,-48,35,-46,-86,-28,23,-5,23,-26, -9,18,-21,-4,-33,3,-6,81,38,-58,54,22,66,45,48,-14,39,33,-31,-62,-80,-13,45,-84,23,9,-50,15,18,5,37,31, 5,-1,10,-26,-36,-52,-43,93,-20,32,-4,-8,49,-47,34,-59,8,50,5,-11,12,14,21,-83,-6,40,-22,-45,-30,-20,-18,45, 
  /* [55][0][][] */ 0,-58,-102,-11,-34,32,-7,-66,-59,-79,65,5,-115,-65,0,19,-111,44,11,-101,65,39,-32,29,1,-107,44,10,-96,-41,-44,-102, -58,-91,-38,-103,-93,47,-87,-93,-27,4,-10,-39,-25,-17,27,-56,27,-61,-3,25,56,47,-37,-22,-3,3,-88,-91,-46,-127,59,26, 61,-42,-89,-66,45,-111,-36,18,-125,-4,-67,37,39,-60,-107,-39,-105,11,-12,-32,-91,26,-8,18,-34,61,9,0,-10,51,-45,11, 
  /* [56][0][][] */ 30,10,-51,-53,-11,-43,-6,-62,-28,16,-32,26,-1,-25,-66,12,10,20,18,50,-12,14,-104,5,-48,-22,-30,-21,-42,-13,-31,-63, -30,-7,-28,44,-15,-30,0,9,-34,12,30,-48,-42,46,41,-2,19,-15,-14,29,-36,-39,-12,-7,50,2,32,60,60,-25,-20,9, -127,-16,-7,-66,-14,14,23,55,-43,31,12,-23,9,10,-43,21,17,-12,6,29,63,-10,10,-12,-7,-30,-44,-23,22,-11,-6,69, 
  /* [57][0][][] */ 121,-78,-14,-11,28,43,70,32,-19,29,-20,-105,-127,-42,-40,25,-30,-88,2,-50,-3,-55,-32,57,-28,-90,-42,-56,-54,37,-71,-2, -84,92,0,-22,-28,-53,-10,60,44,-95,-21,15,12,8,64,3,36,49,-56,7,25,-46,15,-6,36,58,5,26,-31,-5,60,2, 62,24,42,-11,-36,48,-58,1,-25,61,14,15,43,-66,35,-41,2,33,-29,-8,7,-5,45,-38,-23,58,20,-12,-24,-62,42,60, 
  /* [58][0][][] */ 88,-84,5,15,41,-2,37,15,-3,54,-55,-77,-21,-98,-17,45,-33,1,51,39,123,-57,-5,66,-60,19,-34,70,-44,55,31,-63, 15,2,-28,31,-47,61,-5,-99,-77,34,-16,8,74,-19,-44,-31,30,49,-25,2,-22,-4,-41,49,-25,-60,11,-31,-1,11,-23,-97, 62,2,58,-13,70,-20,-52,18,22,-49,0,14,-5,-49,21,-34,9,-14,-62,-30,29,-57,27,-53,-93,30,16,42,-12,-127,-48,-58, 
  /* [59][0][][] */ -12,-29,4,-112,-35,26,-127,-44,-71,-84,-71,-61,41,-40,11,-70,2,-15,-25,-124,6,-73,-3,-79,-117,-4,-72,-58,10,-76,-54,-78, -17,-113,-8,20,-69,-46,33,-7,-47,-2,-53,-7,-47,-110,-62,-25,-24,-48,11,27,-15,-69,-65,12,25,-11,-29,-46,-72,57,-38,-21, -17,61,-8,-28,24,-55,-44,-26,-6,-35,-22,-17,-10,-24,-59,-66,-71,13,-9,-49,9,-18,25,-58,-59,7,-20,-61,-72,5,-55,-28, 
  /* [60][0][][] */ -20,-16,-46,85,76,-5,5,10,-32,-120,-15,68,18,-108,-112,-80,-88,29,-41,18,-26,-98,49,-76,-5,-42,15,49,-13,-81,0,-81, 75,-51,16,3,-21,-33,-20,-18,60,53,-50,-43,54,-53,-127,-80,-98,-112,20,-52,-40,-80,32,-109,-18,-55,-66,-44,-50,16,-44,-109, 63,15,32,25,-19,-41,-52,30,-51,71,-42,4,34,31,-7,13,-41,30,72,-57,-102,-19,-99,40,-115,-45,78,-59,-99,-65,3,-87, 
  /* [61][0][][] */ -4,16,23,-97,-23,-67,-42,-46,-56,-84,-70,66,62,-48,-43,79,-90,50,-30,-51,-13,62,-75,-47,-82,21,-57,84,-38,36,40,-6, 23,-29,38,-1,-27,28,-22,-17,-36,-47,53,53,80,4,-19,-11,39,26,-47,18,-108,3,32,-68,40,81,-8,-18,-28,-51,-1,-69, -61,17,-3,-63,26,32,29,27,-62,-61,-31,-66,-111,49,21,7,-21,58,76,-45,-16,-5,-67,-30,44,-46,-2,2,21,-127,14,54, 
  /* [62][0][][] */ 74,66,35,41,-27,23,61,10,71,8,36,44,-3,27,21,-3,29,8,-20,10,-83,-70,16,-35,39,-16,20,54,24,-40,10,-3, -127,31,-13,42,-33,34,7,-30,-35,-6,-6,-22,7,-3,-36,-3,-12,-15,37,21,69,32,-48,-1,-37,-32,27,2,20,-45,-10,63, -92,-70,-17,54,-36,-12,4,2,31,-28,-28,-7,-24,24,23,-57,40,-34,19,-51,43,-37,15,53,8,-24,-72,32,-31,2,-14,18, 
  /* [63][0][][] */ -21,-34,-38,-43,-45,-20,-56,-21,-37,-2,-36,0,-30,-31,10,-43,30,-37,-27,-45,-16,12,-38,-47,-59,-35,29,17,-2,-78,12,-40, -17,-39,-15,-6,30,-2,-28,-29,-31,34,-15,9,-66,-38,-70,-63,-2,-52,-5,-41,37,26,4,89,-23,8,-2,-17,-29,87,15,25, -22,127,-43,1,-11,26,-11,-31,-12,-56,33,12,32,69,39,-18,-36,31,-11,8,-14,-24,6,5,23,-2,22,-2,8,42,49,37, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant9_scale = { 64, { 0.0028590133879333735, 0.0022860260214656591, 0.0036761851515620947, 0.0025005717761814594, 0.0020245509222149849, 0.0025580842047929764, 0.0026084003038704395, 0.002651949180290103, 0.0024084667675197124, 0.002422034740447998, 0.0016367305070161819, 0.0030330850277096033, 0.0017517200903967023, 0.0018442298751324415, 0.0023959055542945862, 0.002958701690658927, 0.0030800770036876202, 0.0019108627457171679, 0.0021111757960170507, 0.0014257329748943448, 0.0024440453853458166, 0.0025471439585089684, 0.0029439225327223539, 0.0025992977898567915, 0.0016964336391538382, 0.0017288866220042109, 0.002750336891040206, 0.0026321965269744396, 0.0043066008947789669, 0.0017216360429301858, 0.00193872454110533, 0.0027111114468425512, 0.0021495847031474113, 0.0013145168777555227, 0.0022636596113443375, 0.0033728268463164568, 0.0032152719795703888, 0.0045628780499100685, 0.0031900254543870687, 0.0018487925408408046, 0.002623510779812932, 0.0022625897545367479, 0.0034011586103588343, 0.0022432277910411358, 0.0019781948067247868, 0.0020726139191538095, 0.0018558320589363575, 0.0031763191800564528, 0.0040336316451430321, 0.0018268597777932882, 0.0013500388013198972, 0.0024373624473810196, 0.0013616655487567186, 0.0025311436038464308, 0.0035040152724832296, 0.001594914123415947, 0.0037781200371682644, 0.002644265303388238, 0.0024833101779222488, 0.0023657104466110468, 0.0014793339651077986, 0.0027314047329127789, 0.0038776565343141556, 0.0036610956303775311, } };
const TfArray<64, int> quant9_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 20, 40, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[4] = { 1, 20, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 1, 10, 16, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 10, 1, 32, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[4] = { 1, 1, 5, 32, };
const TfArray<1, int> tensor_dimension14 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 5, 1, 64, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,20,40 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,20,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.0089780343696475029, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,20,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0089780343696475029, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,10,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.0089780343696475029, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,1,10,16 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0089780343696475029, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,1,10,32 } };
const TfArray<1, float> quant21_scale = { 1, { 0.006745604332536459, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,10,1,32 } };
const TfArray<1, float> quant22_scale = { 1, { 0.006745604332536459, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,5,1,32 } };
const TfArray<1, float> quant23_scale = { 1, { 0.006745604332536459, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,1,5,32 } };
const TfArray<1, float> quant24_scale = { 1, { 0.006745604332536459, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,1,5,64 } };
const TfArray<1, float> quant25_scale = { 1, { 0.0097700254991650581, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,5,1,64 } };
const TfArray<1, float> quant26_scale = { 1, { 0.0097700254991650581, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,3,1,64 } };
const TfArray<1, float> quant27_scale = { 1, { 0.0097700254991650581, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,192 } };
const TfArray<1, float> quant28_scale = { 1, { 0.0097700254991650581, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,2 } };
const TfArray<1, float> quant29_scale = { 1, { 0.055901680141687393, } };
const TfArray<1, int> quant29_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,2 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,2 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 18 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 20,8,3 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 22 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 24,9,4 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,6,5 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension0, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1920, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension19, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension21, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension23, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension25, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension27, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension29, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
